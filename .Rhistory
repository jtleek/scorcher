theme_minimal() +
geom_point(size = 5, alpha = 0.8, pch = -1 * as.hexmode(9829)) +
scale_color_gradientn(colors = c("#FF69B4", "#FFC0CB", "#FF69B4")) +
theme(
legend.position = "none",
plot.title = ggtext::element_textbox_simple(
family = "Enriqueta", size = rel(1.5), lineheight = 1.3,
margin = margin(0.5, 0, 1, 0, "lines"), face = "bold",
halign = 0, colour = "#FF1493")) +
transition_time(group) +
ease_aes('cubic-in-out') +
shadow_mark(alpha = 0.5) +
labs(
title = "Happy Valentine's Day, Beautiful!",
x = "x(t)", y = "y(t)") +
theme(
plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 14))
p <- ggplot(heart_data,
aes(x = x_jitter, y = y_jitter, group = group, color = group)) +
theme_minimal() +
geom_point(size = 5, alpha = 0.8, pch = -1 * as.hexmode(9829)) +
scale_color_gradientn(colors = c("#FF69B4", "#FFC0CB", "#FF69B4")) +
theme(
legend.position = "none",
plot.title = ggtext::element_textbox_simple(
family = "Enriqueta", size = rel(1.5), lineheight = 1.3,
margin = margin(0.5, 0, 1, 0, "lines"), face = "bold",
halign = 0.5, colour = "#FF1493")) +
transition_time(group) +
ease_aes('cubic-in-out') +
shadow_mark(alpha = 0.5) +
labs(
title = "Happy Valentine's Day, Beautiful!",
x = "x(t)", y = "y(t)") +
theme(
axis.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 14))
anim <- animate(p, nframes = 100, fps = 15, width = 500, height = 500,
renderer = gifski_renderer())
anim
p <- ggplot(heart_data,
aes(x = x_jitter, y = y_jitter, group = group, color = group)) +
theme_minimal() +
geom_point(size = 5, alpha = 0.8, pch = -1 * as.hexmode(9829)) +
scale_color_gradientn(colors = c("#FF69B4", "#FFC0CB", "#FF69B4")) +
theme(
legend.position = "none",
plot.title = ggtext::element_textbox_simple(
family = "Enriqueta", size = rel(1.5), lineheight = 1.3,
margin = margin(0.5, 0, 1, 0, "lines"), face = "bold",
halign = 0.5, colour = "#FF1493")) +
transition_time(group) +
ease_aes('cubic-in-out') +
shadow_mark(alpha = 0.5) +
labs(
title = "Fig 1. Your Cheesy, Annual Valentine's Day Plot",
subtitle = "Brought to you by the letter `R`",
caption = expression(
t == ~t),
x = "x(t)", y = "y(t)") +
theme(
axis.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 14))
anim <- animate(p, nframes = 100, fps = 15, width = 500, height = 500,
renderer = gifski_renderer())
anim
p <- ggplot(heart_data,
aes(x = x_jitter, y = y_jitter, group = group, color = group)) +
theme_minimal() +
geom_point(size = 5, alpha = 0.8, pch = -1 * as.hexmode(9829)) +
scale_color_gradientn(colors = c("#FF69B4", "#FFC0CB", "#FF69B4")) +
theme(
legend.position = "none",
plot.title = ggtext::element_textbox_simple(
family = "Enriqueta", size = rel(1.5), lineheight = 1.3,
margin = margin(0.5, 0, 1, 0, "lines"), face = "bold",
halign = 0.5, colour = "#FF1493")) +
transition_time(group) +
ease_aes('cubic-in-out') +
shadow_mark(alpha = 0.5) +
labs(
title = "Fig 1. Your Cheesy, Annual Valentine's Day Plot",
subtitle = "Brought to you by the letter `R`",
caption = expression(
t == ~{t}),
x = "x(t)", y = "y(t)") +
theme(
axis.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 14))
anim <- animate(p, nframes = 100, fps = 15, width = 500, height = 500,
renderer = gifski_renderer())
anim
p <- ggplot(heart_data,
aes(x = x_jitter, y = y_jitter, group = group, color = group)) +
theme_minimal() +
geom_point(size = 5, alpha = 0.8, pch = -1 * as.hexmode(9829)) +
annotate("text", x = 0, y = 0, label = "Happy V-Day, Beautiful!") +
scale_color_gradientn(colors = c("#FF69B4", "#FFC0CB", "#FF69B4"))
p <- ggplot(heart_data,
aes(x = x_jitter, y = y_jitter, group = group, color = group)) +
theme_minimal() +
geom_point(size = 5, alpha = 0.8, pch = -1 * as.hexmode(9829)) +
annotate("text", x = 0, y = 0, label = "Happy V-Day, Beautiful!") +
scale_color_gradientn(colors = c("#FF69B4", "#FFC0CB", "#FF69B4")) +
transition_time(group) +
ease_aes('cubic-in-out') +
shadow_mark(alpha = 0.5) +
labs(
title = "Fig 1. Your Cheesy, Annual Valentine's Day Plot",
subtitle = "Brought to you by the letter `R`",
caption = expression(
t == ~{t}),
x = "x(t)", y = "y(t)")
p <- ggplot(heart_data,
aes(x = x_jitter, y = y_jitter, group = group, color = group)) +
theme_minimal() +
geom_point(size = 5, alpha = 0.8, pch = -1 * as.hexmode(9829)) +
annotate("text", x = 0, y = 0, label = "Happy V-Day, Beautiful!") +
scale_color_gradientn(colors = c("#FF69B4", "#FFC0CB", "#FF69B4")) +
transition_time(group) +
ease_aes('cubic-in-out') +
shadow_mark(alpha = 0.5) +
labs(
title = "Fig 1. Your Cheesy, Annual Valentine's Day Plot",
subtitle = "Brought to you by the letter `R`",
caption = expression(
t == ~{t}),
x = "x(t)", y = "y(t)") +
theme(
legend.position = "none",
plot.title = ggtext::element_textbox_simple(
family = "Enriqueta", size = rel(1.5), lineheight = 1.3,
margin = margin(0.5, 0, 1, 0, "lines"), face = "bold",
halign = 0.5, colour = "#FF1493"),
plot.subtitle = element_text(hjust = 0.5),
axis.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 14))
anim <- animate(p, nframes = 100, fps = 15, width = 500, height = 500,
renderer = gifski_renderer())
anim
p <- ggplot(heart_data,
aes(x = x_jitter, y = y_jitter, group = group, color = group)) +
theme_minimal() +
geom_point(size = 5, alpha = 0.8, pch = -1 * as.hexmode(9829)) +
annotate("text", x = 0, y = 0, label = "Happy V-Day, Beautiful!") +
scale_color_gradientn(colors = c("#FF69B4", "#FFC0CB", "#FF69B4")) +
transition_time(group) +
ease_aes('cubic-in-out') +
shadow_mark(alpha = 0.5) +
labs(
title = "Fig 1. Your Cheesy, Annual Valentine's Day Plot",
subtitle = "Brought to you by the letter `R`",
caption = paste("t =", {t}),
x = "x(t)", y = "y(t)") +
theme(
legend.position = "none",
plot.title = ggtext::element_textbox_simple(
family = "Enriqueta", size = rel(1.5), lineheight = 1.3,
margin = margin(0.5, 0, 1, 0, "lines"), face = "bold",
halign = 0.5, colour = "#FF1493"),
plot.subtitle = element_text(hjust = 0.5),
axis.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 14))
anim <- animate(p, nframes = 100, fps = 15, width = 500, height = 500,
renderer = gifski_renderer())
anim
anim
p <- ggplot(heart_data,
aes(x = x_jitter, y = y_jitter, group = group, color = group)) +
theme_minimal() +
geom_point(size = 5, alpha = 0.8, pch = -1 * as.hexmode(9829)) +
annotate("text", x = 0, y = 0, label = "Happy V-Day, Beautiful!") +
scale_color_gradientn(colors = c("#FF69B4", "#FFC0CB", "#FF69B4")) +
transition_time(group) +
ease_aes('cubic-in-out') +
shadow_mark(alpha = 0.5) +
labs(
title = "Fig 1. Your Cheesy, Annual Valentine's Day Plot",
subtitle = "Brought to you by the letter `R`",
caption = "t = {t}",
x = "x(t)", y = "y(t)") +
theme(
legend.position = "none",
plot.title = ggtext::element_textbox_simple(
family = "Enriqueta", size = rel(1.5), lineheight = 1.3,
margin = margin(0.5, 0, 1, 0, "lines"), face = "bold",
halign = 0.5, colour = "#FF1493"),
plot.subtitle = element_text(hjust = 0.5),
axis.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 14))
anim <- animate(p, nframes = 100, fps = 15, width = 500, height = 500,
renderer = gifski_renderer())
anim
p <- ggplot(heart_data,
aes(x = x_jitter, y = y_jitter, group = group, color = group)) +
theme_minimal() +
geom_point(size = 5, alpha = 0.8, pch = -1 * as.hexmode(9829)) +
annotate("text", x = 0, y = 0, label = "Happy V-Day, Beautiful!",
color = "#FF69B4", size = 5) +
scale_color_gradientn(colors = c("#FF69B4", "#FFC0CB", "#FF69B4")) +
transition_time(group) +
ease_aes('cubic-in-out') +
shadow_mark(alpha = 0.5) +
labs(
title = "Fig 1. Your Cheesy, Annual Valentine's Day Plot",
subtitle = "Brought to you by the letter `R`",
x = "x(t)", y = "y(t)") +
theme(
legend.position = "none",
plot.title = ggtext::element_textbox_simple(
family = "Enriqueta", size = rel(1.5), lineheight = 1.3,
margin = margin(0.5, 0, 1, 0, "lines"), face = "bold",
halign = 0.5, colour = "#FF1493"),
plot.subtitle = element_text(hjust = 0.5),
axis.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 14))
anim <- animate(p, nframes = 100, fps = 15, width = 500, height = 500,
renderer = gifski_renderer())
anim
p <- ggplot(heart_data,
aes(x = x_jitter, y = y_jitter, group = group, color = group)) +
theme_minimal() +
geom_point(size = 5, alpha = 0.8, pch = -1 * as.hexmode(9829)) +
annotate("text", x = 0, y = 0, label = "Happy V-Day,\nBeautiful!",
color = "#FF69B4", size = 8, face = "bold") +
scale_color_gradientn(colors = c("#FF69B4", "#FFC0CB", "#FF69B4")) +
transition_time(group) +
ease_aes('cubic-in-out') +
shadow_mark(alpha = 0.5) +
labs(
title = "Fig 1. Your Cheesy, Annual Valentine's Day Plot",
subtitle = "Brought to you by the letter `R`",
x = "x(t)", y = "y(t)") +
theme(
legend.position = "none",
plot.title = ggtext::element_textbox_simple(
family = "Enriqueta", size = rel(1.5), lineheight = 1.3,
margin = margin(0.5, 0, 1, 0, "lines"), face = "bold",
halign = 0.5, colour = "#FF1493"),
plot.subtitle = element_text(hjust = 0.5),
axis.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 14))
p <- ggplot(heart_data,
aes(x = x_jitter, y = y_jitter, group = group, color = group)) +
theme_minimal() +
geom_point(size = 5, alpha = 0.8, pch = -1 * as.hexmode(9829)) +
annotate("text", x = 0, y = 0, label = "Happy V-Day,\nBeautiful!",
color = "#FF69B4", size = 8, fontface = "bold") +
scale_color_gradientn(colors = c("#FF69B4", "#FFC0CB", "#FF69B4")) +
transition_time(group) +
ease_aes('cubic-in-out') +
shadow_mark(alpha = 0.5) +
labs(
title = "Fig 1. Your Cheesy, Annual Valentine's Day Plot",
subtitle = "Brought to you by the letter `R`",
x = "x(t)", y = "y(t)") +
theme(
legend.position = "none",
plot.title = ggtext::element_textbox_simple(
family = "Enriqueta", size = rel(1.5), lineheight = 1.3,
margin = margin(0.5, 0, 1, 0, "lines"), face = "bold",
halign = 0.5, colour = "#FF1493"),
plot.subtitle = element_text(hjust = 0.5),
axis.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 14))
anim <- animate(p, nframes = 100, fps = 15, width = 500, height = 500,
renderer = gifski_renderer())
anim
p <- ggplot(heart_data,
aes(x = x_jitter, y = y_jitter, group = group, color = group)) +
theme_minimal() +
geom_point(size = 5, alpha = 0.8, pch = -1 * as.hexmode(9829)) +
annotate("text", x = -2.5, y = 0, label = "Happy V-Day,\nBeautiful!",
color = "#FF69B4", size = 8, fontface = "bold") +
scale_color_gradientn(colors = c("#FF69B4", "#FFC0CB", "#FF69B4")) +
transition_time(group) +
ease_aes('cubic-in-out') +
shadow_mark(alpha = 0.5) +
labs(
title = "Fig 1. Your Cheesy, Annual Valentine's Day Plot",
subtitle = "Brought to you by the letter `R`",
x = "x(t)", y = "y(t)") +
theme(
legend.position = "none",
plot.title = ggtext::element_textbox_simple(
family = "Enriqueta", size = rel(1.5), lineheight = 1.3,
margin = margin(0.5, 0, 1, 0, "lines"), face = "bold",
halign = 0.5, colour = "#FF1493"),
plot.subtitle = element_text(hjust = 0.5),
axis.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 14))
p <- ggplot(heart_data,
aes(x = x_jitter, y = y_jitter, group = group, color = group)) +
theme_minimal() +
geom_point(size = 5, alpha = 0.8, pch = -1 * as.hexmode(9829)) +
annotate("text", x = 0, y = -2.5, label = "Happy V-Day,\nBeautiful!",
color = "#FF69B4", size = 8, fontface = "bold") +
scale_color_gradientn(colors = c("#FF69B4", "#FFC0CB", "#FF69B4")) +
transition_time(group) +
ease_aes('cubic-in-out') +
shadow_mark(alpha = 0.5) +
labs(
title = "Fig 1. Your Cheesy, Annual Valentine's Day Plot",
subtitle = "Brought to you by the letter `R`",
x = "x(t)", y = "y(t)") +
theme(
legend.position = "none",
plot.title = ggtext::element_textbox_simple(
family = "Enriqueta", size = rel(1.5), lineheight = 1.3,
margin = margin(0.5, 0, 1, 0, "lines"), face = "bold",
halign = 0.5, colour = "#FF1493"),
plot.subtitle = element_text(hjust = 0.5),
axis.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 14))
anim <- animate(p, nframes = 100, fps = 15, width = 500, height = 500,
renderer = gifski_renderer())
anim
library(igraph)
net1 <- graph_from_literal(A-B:C:D, A-C, B-C)
net2 <- graph_from_literal(A-X:Y:Z, Z-Y)
par(mfrow = c(1, 3))
set.seed(1)
plot(net1, vertex.size = 50, main = "net1")
plot(net2, vertex.size = 50, main = "net2")
plot(union(net1, net2), , vertex.size = 50, main = "union of net1 and net2")
?igraph::union
plot(igraph::union(net1, net2), , vertex.size = 50, main = "union of net1 and net2")
?GLUE
?glue
initiate_scorch <- function(dl) {
#-- SCORCHER MODEL IS STILL A LIST
l <- list(
#- DATALOADER
dl = dl,
#- ARCHITECTURE AS GRAPH INSTEAD OF LIST
scorch_graph = igraph::make_empty_graph(directed = TRUE),
#- KEEP TRACK OF ALL LAYERS
layers = list(),
#- TRACK LAST LAYER FOR IMPLICIT CONNECTIONS
last_layer = NULL
)
create_scorch_model_class(l)
}
create_scorch_model_class <- function(obj) {
structure(obj, class = "scorch_model")
}
print.scorch_model <- function(x, ...) {
cat("This scorch model has a dataloader object with features:\n\n")
print(x$dl)
cat("\n\nModel architecture:\n\n")
if (length(igraph::V(x$scorch_graph)) == 0) {
cat(" * No layers\n\n")
} else {
layer_names <- igraph::V(x$scorch_graph)$name
for (i in seq_along(layer_names)) {
cat(glue::glue(" * Layer {i} is a {crayon::red(layer_names[i])} layer\n\n"))
}
}
}
scorch_layer <- function(scorch_model, layer_type,
in_features = NULL, out_features = NULL, use_residual = FALSE, name = NULL) {
#-- CONVERT LAYER TYPE TO LOWERCASE
layer_type <- tolower(layer_type)
#-- ENSURE GRAPH EXISTS
if (is.null(scorch_model$scorch_graph)) {
scorch_model$scorch_graph <- igraph::graph.empty(directed = TRUE)
}
#-- VALIDATE LAYER TYPES
valid_layers <- sapply(layer_type, function(layer) {
function_name <- paste0("nn_", layer)
exists(function_name, envir = asNamespace("torch"))
})
if (!all(valid_layers)) {
invalid_layers <- layer_type[!valid_layers]
stop(paste("Invalid layer types detected:",
paste(invalid_layers, collapse = ", ")))
}
#-- GENERATE DEFAULT LAYER NAME IF NOT PROVIDED
if (is.null(name)) {
name <- paste0("Layer_", length(igraph::V(scorch_model$scorch_graph)) + 1)
}
#-- INITIALIZE INPUT TRACKING
if (is.null(scorch_model$last_layer)) {
scorch_model$last_layer <- "input"
if (!"input" %in% igraph::V(scorch_model$scorch_graph)$name) {
scorch_model$scorch_graph <- igraph::add_vertices(
scorch_model$scorch_graph, 1, name = "input")
}
}
input_layer <- scorch_model$last_layer
#-- CREATE LAYERS
layers <- lapply(layer_type, function(layer) {
function_name <- paste0("nn_", layer)
nn_function <- get(function_name, envir = asNamespace("torch"))
args_list <- list()
if ("in_features" %in% names(formals(nn_function))) {
args_list$in_features <- in_features
}
if ("out_features" %in% names(formals(nn_function))) {
args_list$out_features <- out_features
}
do.call(nn_function, args_list)
})
#-- ADD NEW LAYERS AS VERTICES IN THE GRAPH
if (!(name %in% igraph::V(scorch_model$scorch_graph)$name)) {
scorch_model$scorch_graph <- igraph::add_vertices(
scorch_model$scorch_graph, 1, name = name)
}
#-- ADD EDGE FROM PREVIOUS LAYER
if (input_layer %in% igraph::V(scorch_model$scorch_graph)$name) {
scorch_model$scorch_graph <- igraph::add_edges(
scorch_model$scorch_graph, c(input_layer, name))
} else {
warning(glue::glue("Input layer '{input_layer}' not found in graph. Skipping edge connection."))
}
#-- STORE LAYERS
scorch_model$layers[[name]] <- layers
scorch_model$last_layer <- name
return(scorch_model)
}
scorch_merge <- function(scorch_model_A, scorch_model_B, name = "merged") {
combined_graph <- igraph::union(
scorch_model_A$scorch_graph, scorch_model_B$scorch_graph)
combined_graph <- igraph::add_vertices(
combined_graph, 1, name = name)
for (last in c(scorch_model_A$last_layer, scorch_model_B$last_layer)) {
combined_graph <- igraph::add_edges(combined_graph, c(last, name))
}
scorch_model <- list(
dl = scorch_model_A$dl,
scorch_graph = combined_graph,
last_layer = list(name)
)
create_scorch_model_class(scorch_model)
}
scorch_split <- function(scorch_model, input_name, output_names) {
for (output in output_names) {
if (!(output %in% igraph::V(scorch_model$scorch_graph)$name)) {
scorch_model$scorch_graph <- igraph::add_vertices(
scorch_model$scorch_graph, 1, name = output)
}
scorch_model$scorch_graph <- igraph::add_edges(
scorch_model$scorch_graph, c(input_name, output))
}
scorch_model$last_layer <- output_names
return(scorch_model)
}
library(torch); library(igraph)
# Define input and output
input  <- mtcars |> as.matrix() |> torch::torch_tensor()
output <- mtcars |> as.matrix() |> torch::torch_tensor()
# Create data loader
dl <- scorch_create_dataloader(input, output, batch_size = 2)
source("R/create_dataloader.R")
library(torch); library(igraph)
# Define input and output
input  <- mtcars |> as.matrix() |> torch::torch_tensor()
output <- mtcars |> as.matrix() |> torch::torch_tensor()
# Create data loader
dl <- scorch_create_dataloader(input, output, batch_size = 2)
d# Define model using piped layer addition
# Create data loader
dl <- scorch_create_dataloader(input, output, batch_size = 2)
# Define model using piped layer addition
scorch_model <- dl |> initiate_scorch() |>
scorch_layer("linear", 16, 32) |>
scorch_layer("relu") |>
scorch_layer("linear", 32, 10, use_residual = TRUE)
# Print model structure
print(scorch_model)
plot(scorch_model$scorch_graph)
# Create input data
input_A <- mtcars[, 1:5] |> as.matrix() |> torch::torch_tensor()
input_B <- mtcars[, 6:11] |> as.matrix() |> torch::torch_tensor()
output  <- mtcars[, 1:2] |> as.matrix() |> torch::torch_tensor()
# Create dataloaders
dl_A <- scorch_create_dataloader(input_A, output, batch_size = 2)
dl_B <- scorch_create_dataloader(input_B, output, batch_size = 2)
# Initialize separate models
model_A <- initiate_scorch(dl_A) |>
scorch_layer("linear", in_features = 5, out_features = 3, name = "Layer_A1") |>
scorch_layer("relu", name = "Layer_A2")
merged_model <- initiate_scorch(dl_B) |>
scorch_layer("linear", in_features = 6, out_features = 4, name = "Layer_B1") |>
scorch_layer("relu", name = "Layer_B2") |>
scorch_merge(model_A, name = "Merged_Layer") # Merge the two branches
final_model <- merged_model |>
scorch_split(input_name = "Merged_Layer", output_names = c("Output_1", "Output_2"))
# Print model architecture
print(final_model)
plot(final_model$scorch_graph, layout = layout_as_tree)
par(mfrow = c(1, 1))
set.seed(1)
plot(net1, vertex.size = 50, main = "net1")
plot(net2, vertex.size = 50, main = "net2")
net1 <- graph_from_literal(A-B:C:D, A-C, B-C)
net2 <- graph_from_literal(A-X:Y:Z, Z-Y)
par(mfrow = c(1, 1))
set.seed(1)
plot(net1, vertex.size = 50, main = "net1")
plot(net2, vertex.size = 50, main = "net2")
plot(igraph::union(net1, net2), , vertex.size = 50, main = "union of net1 and net2")
net1 <- graph_from_literal(A-B:C:D, A-C, B-C)
net2 <- graph_from_literal(A-X:Y:Z, Z-Y)
par(mfrow = c(1, 1))
set.seed(1)
plot(net1, vertex.size = 50, main = "net1")
plot(net2, vertex.size = 50, main = "net2")
plot(igraph::union(net1, net2), , vertex.size = 50, main = "union of net1 and net2")
plot(final_model$scorch_graph, layout = layout_as_tree)
